{"title":"二叉树的遍历","date":"2019-12-23T10:51:21.658Z","link":"post/二叉树的遍历","updated":"2019-12-23T10:50:27.670Z","content":"<h1 id=\"二叉树的遍历\">二叉树的遍历<a href=\"post/二叉树的遍历#二叉树的遍历\"></a></h1><blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">&gt;     E element;</span><br><span class=\"line\">&gt;     Node&lt;E&gt; leftNode;</span><br><span class=\"line\">&gt;     Node&lt;E&gt; rightNode;</span><br><span class=\"line\">&gt;     Node&lt;E&gt; parentNode;</span><br><span class=\"line\">&gt;     <span class=\"keyword\">public</span> Node&lt;E&gt;(E element, Node&lt;E&gt; parentNode;) &#123;</span><br><span class=\"line\">&gt;         <span class=\"keyword\">this</span>.element = element;</span><br><span class=\"line\">&gt;         <span class=\"keyword\">this</span>,parentNode = parentNode;</span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<h2 id=\"1-前序遍历\">1.前序遍历<a href=\"post/二叉树的遍历#1-前序遍历\"></a></h2><figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//前序遍历(递归)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preorderTraversal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    preorderTraversal(rootNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">preorderTraversal</span><span class=\"params\">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    System.out.println(node.element);</span><br><span class=\"line\">    preorderTraversal(node.leftNode);</span><br><span class=\"line\">    preorderTraversal(node.rightNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//前序遍历(非递归)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">inOrderTraveralWithStack</span><span class=\"params\">(Node&lt;E&gt; node)</span></span>&#123;</span><br><span class=\"line\">    Stack&lt;Node&lt;E&gt;&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    Node&lt;E&gt; newNode = node;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(newNode!=<span class=\"keyword\">null</span> || !stack.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(newNode != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.print(newNode.element);</span><br><span class=\"line\">            stack.push(newNode);</span><br><span class=\"line\">            newNode = newNode.leftNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!stack.isEmpty())&#123;</span><br><span class=\"line\">            newNode = stack.pop();</span><br><span class=\"line\">            newNode = newNode.rightNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"2-中序遍历\">2.中序遍历<a href=\"post/二叉树的遍历#2-中序遍历\"></a></h2><figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中序遍历(递归)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inorderTraversal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    inorderTraversal(rootNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">inorderTraversal</span><span class=\"params\">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    inorderTraversal(node.leftNode);</span><br><span class=\"line\">    System.out.println(node.element);</span><br><span class=\"line\">    inorderTraversal(node.rightNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//中序遍历(非递归)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">inOrderTraveralWithStack</span><span class=\"params\">(Node&lt;E&gt; node)</span></span>&#123;</span><br><span class=\"line\">    Stack&lt;Node&lt;E&gt;&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    Node&lt;E&gt; newNode = node;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(newNode!=<span class=\"keyword\">null</span> || !stack.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(newNode != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(newNode);</span><br><span class=\"line\">            newNode = newNode.leftNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!stack.isEmpty())&#123;</span><br><span class=\"line\">            newNode = stack.pop();</span><br><span class=\"line\">            System.out.print(newNode.element);</span><br><span class=\"line\">            newNode = newNode.rightNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"3-后序遍历\">3.后序遍历<a href=\"post/二叉树的遍历#3-后序遍历\"></a></h2><figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//后序遍历(递归)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postorderTraversal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    postorderTraversal(rootNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postorderTraversal</span><span class=\"params\">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    postorderTraversal(node.leftNode);</span><br><span class=\"line\">    postorderTraversal(node.rightNode);</span><br><span class=\"line\">    System.out.println(node.element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//后序遍历(非递归)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrderTraveralWithStack</span><span class=\"params\">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;Node&lt;E&gt;&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    Node&lt;E&gt; newNode = node;</span><br><span class=\"line\">    Node&lt;E&gt; lastNode = <span class=\"keyword\">null</span>;   <span class=\"comment\">//标记每次遍历最后一次访问的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(newNode!=<span class=\"keyword\">null</span> || !stack.isEmpty()) &#123;<span class=\"comment\">//节点不为空，结点入栈，并且指向下一个左孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(newNode!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(newNode);</span><br><span class=\"line\">            newNode = newNode.leftNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//栈不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!stack.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"comment\">//出栈</span></span><br><span class=\"line\">            newNode = stack.pop();</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 这块就是判断treeNode是否有右孩子，</span></span><br><span class=\"line\"><span class=\"comment\">             * 如果没有输出treeNode.data，让lastVisit指向treeNode，并让treeNode为空</span></span><br><span class=\"line\"><span class=\"comment\">             * 如果有右孩子，将当前节点继续入栈，treeNode指向它的右孩子,继续重复循环</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(newNode.rightNode == <span class=\"keyword\">null</span> || newNode.rightNode == lastNode) &#123;</span><br><span class=\"line\">                System.out.print(newNode.element);</span><br><span class=\"line\">                lastNode = newNode;</span><br><span class=\"line\">                newNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                stack.push(newNode);</span><br><span class=\"line\">                newNode = newNode.rightNode;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"4-层序遍历\">4.层序遍历<a href=\"post/二叉树的遍历#4-层序遍历\"></a></h2><figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//层序遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">levelOrderTraversal</span><span class=\"params\">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rootNode == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    Queue&lt;Node&lt;E&gt;&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.offer(rootNode);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; node = queue.poll();</span><br><span class=\"line\">        System.out.println(node.element);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.leftNode!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.offer(node.leftNode);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.rightNode!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            queue.offer(node.rightNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n","next":{"title":"Java面试","link":"post/Java面试"},"plink":"http://YIzzzzz.github.io/post/二叉树的遍历/","toc":[{"title":"二叉树的遍历","id":"二叉树的遍历","index":"1","children":[{"title":"1.前序遍历","id":"1-前序遍历","index":"1.1"},{"title":"2.中序遍历","id":"2-中序遍历","index":"1.2"},{"title":"3.后序遍历","id":"3-后序遍历","index":"1.3"},{"title":"4.层序遍历","id":"4-层序遍历","index":"1.4"}]}]}